// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyMovies.Models;

#nullable disable

namespace MyMovies.Migrations
{
    [DbContext(typeof(MyMoviesDbContext))]
    [Migration("20221003100608_CreatedCompositeKey")]
    partial class CreatedCompositeKey
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyMovies.Models.Genre", b =>
                {
                    b.Property<long>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GenreId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MyMovies.Models.Movie", b =>
                {
                    b.Property<long>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MovieId"), 1L, 1);

                    b.Property<long>("GenreId")
                        .HasColumnType("bigint");

                    b.Property<long>("MpaaId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(3,1)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("MovieId");

                    b.HasIndex("GenreId");

                    b.HasIndex("MpaaId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MyMovies.Models.Mpaa", b =>
                {
                    b.Property<long>("MpaaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MpaaId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MpaaId");

                    b.ToTable("Mpaas");
                });

            modelBuilder.Entity("MyMovies.Models.WatchList", b =>
                {
                    b.Property<long>("WatchListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WatchListId"), 1L, 1);

                    b.HasKey("WatchListId");

                    b.ToTable("WatchLists");
                });

            modelBuilder.Entity("MyMovies.Models.WatchListMovies", b =>
                {
                    b.Property<long>("WatchListId")
                        .HasColumnType("bigint");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.HasKey("WatchListId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("WatchListMovies");
                });

            modelBuilder.Entity("MyMovies.Models.Movie", b =>
                {
                    b.HasOne("MyMovies.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyMovies.Models.Mpaa", "Mpaa")
                        .WithMany()
                        .HasForeignKey("MpaaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Mpaa");
                });

            modelBuilder.Entity("MyMovies.Models.WatchListMovies", b =>
                {
                    b.HasOne("MyMovies.Models.Movie", "Movie")
                        .WithMany("WatchListMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyMovies.Models.WatchList", "WatchList")
                        .WithMany("WatchListMovies")
                        .HasForeignKey("WatchListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("WatchList");
                });

            modelBuilder.Entity("MyMovies.Models.Movie", b =>
                {
                    b.Navigation("WatchListMovies");
                });

            modelBuilder.Entity("MyMovies.Models.WatchList", b =>
                {
                    b.Navigation("WatchListMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
